system('powershell -command $s = netstat -s ; $s > tcp_ip.txt' )
library('h20')
library('H20')
install.packages("H20")
install.packages("deepnet")
library('H20')
library('h20')
install.packages("h20")
library(h2o)
h2o.init(nthreads=-1)
plyrs_path <- 'C:/mydata/datasets/tot_2k_plyrs_data.csv'
plyrs_hex <- h2o.importFile(path = plyrs_path, destination_frame = "plyrs_hex")
dim(plyrs_hex)
namees(plyrs_hex)
names(plyrs_hex)
plyY <- "kills_mean"
plyX <- c("gold_mean" ,"gold_spent_mean", "deaths_mean", "assists_mean", "tot_matches" )
# Split dataset giving the training dataset 75% of the data
ply.split <- h2o.splitFrame(data = plyrs_hex[, c(plyY, plyX)], ratios = 0.75, destination_frames = c("train_hex", "valid_hex"))
train <- ply.split[[1]]
valid <- ply.split[[2]]
kills_glm <- h2o.glm(x =  pylX,
y = plyY,
training_frame = train,
validation_frame = valid,
family = "binomial",
alpha = 0.5,
lambda_search = T)
kills_glm <- h2o.glm(x =  plyX,
y = plyY,
training_frame = train,
validation_frame = valid,
family = "binomial",
alpha = 0.5,
lambda_search = T)
kills_glm <- h2o.glm(x =  plyX,
y = plyY,
training_frame = train,
validation_frame = valid,
family = "gaussian",
alpha = 0.5,
lambda_search = T)
kills_gbm <- h2o.gbm(x = plyX,
y = plyY,
training_frame = train,
validation_frame = valid,
distribution = "gaussian",
ntrees = 50)
library(tidyr)
install.packages("Zelig")
partitions -> 0
partitions <- 0
partitions
RCUs <-  5
WCRs  <- 2
results <- (RCUs / 3000) + (WCRs / 1000 ) = partitions
results
RCUs <-  5
WCRs  <- 2
results <- (RCUs / 3000) + (WCRs / 1000 ) = partitions
u
results <- 0
results <- (RCUs / 3000) + (WCRs / 1000 ) = partitions
results <- (RCUs / 3000) + (WCRs / 1000 ) = partitions
results <- ((RCUs / 3000) + (WCRs / 1000 )) = partitions
results <- (RCUs / 3000) + (WCRs / 1000 )
results
dataPartitons <- sizeOfDataset /10
dataPartitons <- 0
dataPartitons <- sizeOfDataset /10
sizeOfDataset <- 8
dataPartitons <- sizeOfDataset /10
dataPartitons
sizeOfDataset <- 60
dataPartitons <- sizeOfDataset /10
dataPartitons
partitions <- 0
RCUs <-  10
WCRs  <- 15
results <- 0
results <- (RCUs / 3000) + (WCRs / 1000 )
results
RCUs <-  4000
WCRs  <- 2000
results <- 0
results <- (RCUs / 3000) + (WCRs / 1000 )
results
itemssize <- 20000
rcur  <- 0
wcur   < - 0
wcur   <- 0
wcur   <- 0
rtot  <- 0
wtot <- itemssize <- 20000
rcur  <- 0
rtot <- itemssize/4000
wtot <- itemssize/1000
rtot
wtot
wtot <- itemssize <- 72000000
itemssize <- 72000000
rtot <- itemssize/4000
rtot
wtot <- itemssize/1000
totpartions <- rtot + wtot
totpartions
partresults <- (rtot / 3000) + (wtot / 1000 )
partresults
a <- 30 %% 200 + 1
a
b <- 200 %% 30
b
30 + 6
300 * 6
30 * 6
a
a <- 30 %% (200 + 1)
a
9 %% 3
9 %% 3 +
9 %% 3 + 1
9 %% 200 + 1
8 %% 200 + 1
175489 %% 200 + 1
1758674648489 %% 200 + 1
1758674648489 %% 200 + 1
2758674648489 %% 200 + 1
275867 %% 200 + 1
2758679 %% 200 + 1
27586792 %% 200 + 1
275867922 %% 200 + 1
2758679922 %% 200 + 1
2758679920 %% 200 + 1
2758679220 %% 200 + 1
2762624362658679220 %% 200 + 1
272624362658679220 %% 200 + 1
381756 %% 200 + 1
# load the library packages
library(sqldf)
library(dplyr)
library(data.table)
library(zoo)
library(stringr)
library(stringi)
library(tidyr)
# install.packages("devtools")
library(devtools)
# Set the working Directory
setwd("C:/mydata/cysirs/Cyber_Security_Monitoring_With_R")
shell("cscript cyberup_Computer_Installed_Apps.vbs")
